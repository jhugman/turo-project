Architecture
==

In broad brushstrokes, turo follows a typical interpreted language: a string is tokenized and parsed, from which an Abstract Syntax Tree (AST) is produced. The AST is crawled and manipulated in many different ways to validate, evaluate and output the expression that was inputted.

In turo's case the AST is manipulated via visitor pattern operations. This keeps the operations succinct and distinct. The AST nodes are edited in situ. AST tree-proper manipulations are rare.

The `operation-labeller.js` assigns lexigraphical types, operations and units to the nodes in the tree.

`evaluator.js` actually evaluates the expression once it has been labelled.

`to-source.js` outputs the expression in a variety of different ways.

If you want to add more operations e.g. nCr, then look in `operators-default-table.js`. This plugs in to the `operators-symbol-table.js`.

If you want to add more token types, e.g. boolean or string, you should add to the `grammar.pegs`, `ast.js` and `operators-default-table.js`.

There are a number of subsystems that hang off these visitors.

Units 
-- 
 - `units-table.js` - a symbol table of all units and methods to convert between them.
 - `unit-schemes.js` â€“ support to make the number of units navigable, and presentable by an editor.

Predominantly in the over-large `units-table.js`, but also `unit-schemes.js`. Some of this technology, I'm proud of.

This subsystem knows nothing about ASTs, and is part of the context/symbol table held by a `turo` object.

Features of this subsystem: 

  - dimensional anaylsis & comparison, kg/cm^3 and g/ml are both {Mass:1, Length:-3} 
  - arbitrary unit conversion nm => furlong, mph => mm/year
  - unit simplification mi/gallon => mi/inch^3
  - unit refactoring mi/inch^3 => [mi/gallon, mi/liter

Variables
--
  - `variables-symbol-table.js` - Symbol table knows nothing of ASTs.
  - `statement-reevaluator.js` - for tying together statements.
  - `variable-usage-finder.js`

String output
--
  - `to-source.js` - flexible output visitor. Uses definable `display` draw the string.
  - `to-string.js` - complete example on how to output.
  - `to-source-color.js`

Editor support
--
  - `repl.js` - a `readline` based command line.

A number of objects hang off the `turo` object.
  - `autocomplete.js` - this provides support for `readline` tabcomplete and soft-keyboards.
  - `preprocessor-paren-balancer.js` - handles cases of non-matching parentheses.
  - `preprocessor-word-cleaner.js` - handles the case where the expression is embedded in non-turo. This is not well supported.
  - `precision-hacks.js` - 0.1 + 0.2 = 0.3
  - `node-fs.js`
  - `web-fs.js`. If you want to add a file to turo's `includes` directory, add an entry in this file so it shows up in the web apps. This `include` turo keyword makes a stab at asynchrony, but I'm not sure how well it does here.


Parser and tree building
--
 - `ast.js`
 - `resources/grammer.pegjs` - grammar to be transformed into a parser by the excellent brilliant amazing PEG.js.
 - `parser-generated.js` a javascript parser generated by pegjs from `resources/grammer.pegjs`.
 - `parser.js` - a shim between client code and `parser-generated.js`

The exports object for `turo.js` is the publically exported object.